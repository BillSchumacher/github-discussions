---
name: Security

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    # Run weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.11-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.11-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Bandit security linter
        run: |
          pip install bandit[toml]
          bandit -r github_discussions -f json -o bandit-report.json --exit-zero
        continue-on-error: true

      - name: Run Safety check for known security vulnerabilities
        run: |
          pip install safety
          safety check --output json > safety-report.json || true
        continue-on-error: true

      - name: Upload Bandit results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: bandit-report.json
        continue-on-error: true

      - name: Comment PR with security findings
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let comment = '##  Security Scan Results\n\n';

            // Check Bandit results
            if (fs.existsSync('bandit-report.json')) {
              const banditData = JSON.parse(
                fs.readFileSync('bandit-report.json', 'utf8')
              );
              if (banditData.results &&
                  Object.keys(banditData.results).length > 0) {
                comment += '### Bandit Findings\n';
                Object.entries(banditData.results).forEach(([file, issues]) => {
                  if (issues.length > 0) {
                    comment += `**${file}:**\n`;
                    issues.forEach(issue => {
                      comment += `- ${issue.test_name}: ${issue.issue_text} \
                      (Line ${issue.line_number})\n`;
                    });
                  }
                });
              } else {
                comment += ' No Bandit security issues found.\n';
              }
            }


            // Check Safety results
            if (fs.existsSync('safety-report.json')) {
              try {
                const safetyData = JSON.parse(
                  fs.readFileSync('safety-report.json', 'utf8')
                );
                if (safetyData.length > 0) {
                  comment += '\n### Safety Vulnerabilities\n';
                  safetyData.forEach(vuln => {
                    comment += `- **${vuln.package} ${vuln.version}**: \
                    ${vuln.vulnerability}\n`;
                    comment += `  - CVE: ${vuln.cve || 'N/A'}\n`;
                    comment += `  - Advisory: ${vuln.advisory || 'N/A'}\n`;
                  });
                } else {
                  comment += '\n No known security vulnerabilities \
                  in dependencies.\n';
                }
              } catch (e) {
                comment += '\n Unable to parse Safety results.\n';
              }
            }


            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
