---
name: Code Quality

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: >-
            ${{ runner.os }}-pip-3.11-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.11-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Check code formatting with Black
        run: |
          black --check --diff github_discussions tests examples

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff github_discussions tests examples

      - name: Lint with flake8
        run: |
          flake8 github_discussions tests examples

      - name: Type check with mypy
        run: |
          mypy github_discussions

      - name: Check for security issues with bandit
        run: |
          pip install bandit
          bandit -r github_discussions -f json -o bandit-report.json || true
        continue-on-error: true

  format:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: >-
            ${{ runner.os }}-pip-3.11-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.11-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Format code with Black
        run: |
          black github_discussions tests examples

      - name: Sort imports with isort
        run: |
          isort github_discussions tests examples

      - name: Check if files were modified
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "Files were modified during formatting. \
              Please run 'make format' locally."
            git status --porcelain
            exit 1
          else
            echo "All files are properly formatted."
          fi
